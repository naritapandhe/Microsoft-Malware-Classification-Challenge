from pyspark.sql import SparkSession
from pyspark.sql.functions import udf
from pyspark.sql.types import *
from pyspark.rdd import RDD
from pyspark.ml.linalg import SparseVector, VectorUDT
import numpy as np
import subprocess
import os
import time

class preprocessor(object):
    def __init__(self):
        #load list of most common bigrams from training set
        bigrams = list(np.load('./data/most_common_bigrams.npy'))
        bigrams = dict(enumerate(bigrams))
        self.top_bigrams = dict((y,x) for x,y in bigrams.iteritems())
        
    
    def _term_frequency(self,row):
        '''
        get term frequency of 4-hexadecimal-character words
        '''
        """
        #use s3 cli to get binary from hash file
        cmd = 'aws s3 cp s3://eds-uga-csci8360/data/project2/binaries/%s.bytes data/binaries/%s.bytes' % (row,row)
        subprocess.call(cmd, shell=True)
        """
        #tokenize file
        path = '/Users/admin/Documents/pythonworkspace/data-science-practicum/project-2/eatingnails-project2/binaries/train/' + row + '.bytes'
        """
        while not os.path.isfile(path):
            time.sleep(1)
            cmd = 'aws s3 cp s3://eds-uga-csci8360/data/project2/binaries/%s.bytes data/binaries/%s.bytes' % (row,row)
            subprocess.call(cmd, shell=True)
        """    
        with open(path,'r') as f:
            tokens = [word for word in f.read().replace('\n', ' ').split() if len(word)==2 and word!="??"] 
            
        print tokens
        
        """
        #del file for space        
        cmd = 'rm data/binaries/%s.bytes' % (row)
        push=subprocess.Popen(cmd, shell=True, stdout = subprocess.PIPE)
        
        #convert to sparse dic
        sparse_dic = {}
        for idx in xrange(len(tokens)-1):
            word = tokens[idx]+tokens[idx+1]
            converted = int(word,16)
            if converted in self.top_bigrams:
                key = self.top_bigrams[converted]
                if key in sparse_dic:
                    sparse_dic[key] += 1.
                else:
                    sparse_dic[key] = 1.
        tf = SparseVector(len(self.top_bigrams),sparse_dic)
        return tf
        """

    def transform(self,X_rdd,y_rdd=None):
        '''
        given X RDD (and optionally y RDD), output dataframe with term frequency feature vector and labels
        '''    
        #check input type
        if type(X_rdd) != RDD:
            raise TypeError("Arguments must be pySpark RDDs")
        if y_rdd and type(y_rdd) != RDD:
            raise TypeError("Arguments must be pySpark RDDs")
        
        #convert X to URL paths
        X = X_rdd.map(self._term_frequency)
        
        #check if labels exist
        if y_rdd:
            #combine X and y into single dataframe
            X = X.zipWithIndex().map(lambda r: (r[1],r[0]))
            y = y_rdd.zipWithIndex().map(lambda r: (r[1],r[0]))
            data = X.join(y).map(lambda r: r[1])
            schema = StructType([StructField('features',VectorUDT(),True),StructField('label',StringType(),True)])
            data = data.toDF(schema)
            data = data.withColumn('label',data.label.cast(DoubleType()))
        
        else:
            X = X.map(lambda row: [row])
            schema = StructType([StructField("features", VectorUDT(), True)])
            data = X.toDF(schema)
            
        return data

if __name__ == '__main__':

    #initialize spark session
    spark = SparkSession\
            .builder\
            .appName("Test")\
            .getOrCreate()
    sc = spark.sparkContext

    #paths to training data
    X_file = "./data/X_train_small_1.txt"
    y_file = "./data/y_train_small_1.txt"
    X_file = sc.textFile(X_file)
    y_file = sc.textFile(y_file)
    
    #preprocess data
    preprocessor1 = preprocessor()
    data = preprocessor1.transform(X_file,y_file)
    
    print data.show()

    """
    
    #save to parquet
    try:
        data.write.save("./data/train_small.parquet")
    except:
        pass
        
    #paths to test data
    X_file = "./data/X_test_small1.txt"
    y_file = "./data/y_test_small.txt"
    X_file = sc.textFile(X_file)
    y_file = sc.textFile(y_file)
    
    #preprocess data
    preprocessor2 = preprocessor()
    data = preprocessor2.transform(X_file,y_file)
    
    print data.show()
    
    #save to parquet
    try:
        data.write.save("./data/test_small.parquet")
    except:
        pass

    """    